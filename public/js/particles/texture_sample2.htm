<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0077)http://math.hws.edu/eck/cs424/s12/lab4/lab4-files/texture-coords-example.html -->
<html><script>(function main() {
    // Create enabled event
    function fireEnabledEvent() {
        // If gli exists, then we are already present and shouldn't do anything
        if (!window.gli) {
            setTimeout(function () {
                var enabledEvent = document.createEvent("Event");
                enabledEvent.initEvent("WebGLEnabledEvent", true, true);
                document.dispatchEvent(enabledEvent);
            }, 0);
        } else {
            //console.log("WebGL Inspector already embedded on the page - disabling extension");
        }
    };

    // Grab the path root from the extension
    document.addEventListener("WebGLInspectorReadyEvent", function (e) {
        var pathElement = document.getElementById("__webglpathroot");
        if (window["gliloader"]) {
            gliloader.pathRoot = pathElement.innerText;
        } else {
            // TODO: more?
            window.gliCssUrl = pathElement.innerText + "gli.all.css";
        }
    }, false);

    // Rewrite getContext to snoop for webgl
    var originalGetContext = HTMLCanvasElement.prototype.getContext;
    if (!HTMLCanvasElement.prototype.getContextRaw) {
        HTMLCanvasElement.prototype.getContextRaw = originalGetContext;
    }
    HTMLCanvasElement.prototype.getContext = function () {
        var ignoreCanvas = this.internalInspectorSurface;
        if (ignoreCanvas) {
            return originalGetContext.apply(this, arguments);
        }

        var result = originalGetContext.apply(this, arguments);
        if (result == null) {
            return null;
        }

        var contextNames = ["moz-webgl", "webkit-3d", "experimental-webgl", "webgl", "3d"];
        var requestingWebGL = contextNames.indexOf(arguments[0]) != -1;
        if (requestingWebGL) {
            // Page is requesting a WebGL context!
            fireEnabledEvent(this);

            // If we are injected, inspect this context
            if (window.gli) {
                if (gli.host.inspectContext) {
                    // TODO: pull options from extension
                    result = gli.host.inspectContext(this, result);
                    var hostUI = new gli.host.HostUI(result);
                    result.hostUI = hostUI; // just so we can access it later for debugging
                }
            }
        }

        return result;
    };
})();</script><head><meta http-equiv="Content-Type" content="text/html; charset=ISO-8859-1">
<title>WebGL 2D Texture Example</title>

<!-- Include shader source as script elements with a type that
     will cause the browser to ignore the script.  (This follows
     examples on learningwebgl.com.)  The content of the shader
     scipts is extracted using a function getElementText()
     that is defined in glutil2d.js. -->
<script type="x-shader/x-vertex" id="vshader">
     attribute vec2 vertexCoords;
     attribute vec2 textureCoords;
     uniform int textureStyle;
     varying vec2 texcoords;
     uniform mat3 coordinateTransform;
     void main() {
        vec3 transformedCoords = coordinateTransform * vec3(vertexCoords, 1.0);
        gl_Position = vec4(transformedCoords.xy, 0.0, 1.0);
        if (textureStyle == 1)
           texcoords = textureCoords;
        else if (textureStyle == 2)
           texcoords = transformedCoords.xy;
     }
</script>
<script type="x-shader/x-fragment" id="fshader">
     precision mediump float;
     varying vec2 texcoords;
     uniform int textureStyle;
     uniform vec4 color;
     uniform sampler2D texture;
     void main() {
        if (textureStyle == 0)
           gl_FragColor = color;
        else
           gl_FragColor = texture2D(texture,texcoords);
     }
</script>

<script type="text/javascript" src="./WebGL 2D Texture Example_files/glutil2d.js"></script>

<script type="text/javascript">

"use strict";

var gl;   // The webgl context, to be initialized in init().
var prog; // Identifies the webgl program.
var vertexAttributeBuffer;   // Identifies the databuffer where vertex coords are stored.
var vertexAttributeLocation; // Identifies the vertex attribute variable in the shader program.
var colorUniformLocation;    // Identifies the color uniform variable in the shader program.
var transformUniformLocation;      // Identifies the coordinate matrix uniform variable in the shader program.
var texcoordsAttributeBuffer;      // Identifies the databuffer where texture coords are stored.
var textureCoordAttributeLocation; // Identifies the texture coordinate attribute in the shader program.
var textureLocation;               // Identifies the texture image uniform in the shader program.
var textureStyleUniformLocation;   // Identifies the uniform variable that determines what kind of texture coords are used.

var NO_TEXTURE = 0;              // Three constants to specify how textures are handled; value for the textureStyleUniform
var OBJECT_TEXTURE_COORDS = 1;
var WORLD_TEXTURE_COORDS = 2;

var currentTextureChoice = OBJECT_TEXTURE_COORDS;   // Means show texture with texcoords specified for object (won't show up till texture is loaded)
var textureURL = "webgl.jpg";  // The URL of the image that will be used as a texture.
var textureImage = null;       // The HTML image element for the texture image, will be initialized when texture has loaded.

     
/**
 * Draws a WebGL "primitive."  The first paramter must be one of the constants
 * that specifiy primitives:  gl.POINTS, gl.LINES, gl.LINE_LOOP, gl.LINE_STRIP,
 * gl.TRIANGLES, gl.TRIANGLE_STRIP, gl.TRIANGLE_FAN.  The second parameter must
 * be an array of 2 numbers per vertex, giving the object texture coordinates
 * of the corresponding vertex.  The third parameter must be an array of
 * numbers.   Each pair of numbers provides one vertex for the primitive.  
 * texcoords.length must equal vertices.length.
 */
function drawPrimitive( primitiveType, texcoords, vertices ) {
   gl.bindBuffer(gl.ARRAY_BUFFER,vertexAttributeBuffer);
   gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STREAM_DRAW);
   gl.vertexAttribPointer(vertexAttributeLocation, 2, gl.FLOAT, false, 0, 0);
   gl.enableVertexAttribArray(vertexAttributeLocation);
   if (currentTextureChoice == OBJECT_TEXTURE_COORDS) {
      gl.bindBuffer(gl.ARRAY_BUFFER, texcoordsAttributeBuffer);
      gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(texcoords), gl.STREAM_DRAW);
      gl.vertexAttribPointer(textureCoordAttributeLocation, 2, gl.FLOAT, false, 0, 0);
      gl.enableVertexAttribArray(textureCoordAttributeLocation);
   }
   else {  // In other cases, don't provide values for the texture coord attribute, since they aren't used.
      gl.disableVertexAttribArray(textureCoordAttributeLocation);
   }
   gl.drawArrays(primitiveType, 0, vertices.length/2);
}

/**
 * Draw a rectangle, with object texture coords that will map the entire texture onto
 * the rectangle (assuming that object texture coordinates are used).
 */
function draw() {
   gl.clearColor(1,1,0,1);
   gl.clear(gl.COLOR_BUFFER_BIT);
   drawPrimitive( gl.TRIANGLE_FAN, [0,0, 1,0, 1,1, 0,1], [ -0.8,-0.4, 0.8,-0.4, 0.8,0.4, -0.8,0.4 ]);
}

/**
 *  Do one frame of an animation, and call setTimeout to schedule the next
 *  frame.  But don't do anything if animating is false.
 */
function doFrame( time ) {  // during an animation, advances the rotation amount by one degree per 30 milliseconds
   var degrees = time/50;
   var radians = degrees/180 * Math.PI;
   var c = Math.cos(radians);
   var s = Math.sin(radians);
   var matrix = [ c, s, 0, -s, c, 0, 0, 0, 1 ];  // Matrix for rotation about the point (0,0).
   gl.uniformMatrix3fv(transformUniformLocation, false, matrix);
   draw();
}

var animator = new Animator( doFrame );

/**
 * Called when user checks/unchecks the "Animating" checkbox.
 * Responds by starting/stopping the animation.
 */
function doAnimate() { 
   animator.setAnimating(document.getElementById("animatecheckbox").checked);
}

/**
 * Called in response to a change in one of the radio buttons that
 * control tectureing.  Redraw the picture to show the change (but
 * only if not animating, since if there is an animation, the change
 * will show up in the next frame.)
 */
function doTextureChoice() {
   if (document.getElementById("notexture").checked) {
      if (currentTextureChoice == NO_TEXTURE)
         return;
      currentTextureChoice = NO_TEXTURE;
      gl.uniform1i(textureStyleUniformLocation, NO_TEXTURE);
   }
   else if (document.getElementById("worldcoords").checked) {
      if (currentTextureChoice == WORLD_TEXTURE_COORDS)
         return;
      currentTextureChoice = WORLD_TEXTURE_COORDS;
      if ( textureImage )  // (only apply image if texture has been loaded)
         gl.uniform1i(textureStyleUniformLocation, WORLD_TEXTURE_COORDS);
   }
   else { 
      if (currentTextureChoice == OBJECT_TEXTURE_COORDS)
         return;
      currentTextureChoice = OBJECT_TEXTURE_COORDS; 
      if ( textureImage ) // (only apply image if texture has been loaded)
         gl.uniform1i(textureStyleUniformLocation, OBJECT_TEXTURE_COORDS);
   }
   if (!animator.isAnimating())
       draw();
}

/**
 * This function is called by init() to load the image that will be used
 * as a texture.  It sets up a function to be called asynchronously when
 * the image load is complete.  At that time, a texture object is created
 * and the image is loaded into the texture object.  Properties of the
 * texture object are set.  The currentTextureChoice uniform, representing 
 * how the texture is to be applied to primitives, is set; until the texture
 * image has been loaded, the value of this uniform had to be set to
 * NO_TEXTURE so that the fragment shader would not try to apply an 
 * image that wasn't there yet.  If the picture  is not animating, then
 * the picture is redrawn to show the texture.
 */
function loadTexture() { 
   var img = new Image();
   img.onload = function() { 
      textureImage = img;
      var id = gl.createTexture();
      gl.activeTexture(gl.TEXTURE0);
      gl.bindTexture(gl.TEXTURE_2D, id);
      gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, textureImage);
      gl.generateMipmap(gl.TEXTURE_2D);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);
      gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);
      gl.uniform1i(textureStyleUniformLocation, currentTextureChoice);
      if (!animator.isAnimating())
        draw();
   };
   img.src = textureURL;
}

/**
 * Initializes the WebGL program including the relevant global variables
 * and the WebGL state.  Calls draw() to draw the picture for the first time.
 */
function init() {
   document.getElementById("objectcoords").checked = true;     // (Required for reload in firefox.)
   document.getElementById("animatecheckbox").checked = false; // (Required for reload in firefox.)
   try {
       gl = createWebGLContext("glcanvas");
       var vertexShaderSource = getElementText("vshader"); 
       var fragmentShaderSource = getElementText("fshader");
       prog = createProgram(gl,vertexShaderSource,fragmentShaderSource);
       gl.useProgram(prog);
       vertexAttributeLocation =  gl.getAttribLocation(prog, "vertexCoords");
       colorUniformLocation =  gl.getUniformLocation(prog, "color");
       transformUniformLocation =  gl.getUniformLocation(prog, "coordinateTransform");
       textureCoordAttributeLocation =  gl.getAttribLocation(prog, "textureCoords");
       textureStyleUniformLocation =  gl.getUniformLocation(prog, "textureStyle");
       textureLocation =  gl.getUniformLocation(prog, "texture");
       gl.uniform4fv( colorUniformLocation, [ 0, 0, 1, 1] );
       gl.uniform1i(textureStyleUniformLocation, NO_TEXTURE);
       gl.uniform1i(textureLocation, 0);
       gl.uniformMatrix3fv(transformUniformLocation, false, [ 1,0,0, 0,1,0, 0,0,1 ]);
       vertexAttributeBuffer = gl.createBuffer();
       texcoordsAttributeBuffer = gl.createBuffer();
       gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, true);
   }
   catch (e) {
      alert("Could not initialize WebGL! " + e);
      return;
   }
   loadTexture();  // Start process of loading the texture image.
   draw();
}

</script>
</head><style type="text/css"></style>
<body onload="init()" style="background-color:#DDD">

<h2>WebGL 2D Texture Example</h2>

<p>This example shows a texture on a rectangle, with a choice<br>
of how the texture coordinates are specified.</p>

<noscript>&lt;hr&gt;&lt;h3&gt;This page requires Javascript and a web browser that supports WebGL&lt;/h3&gt;&lt;hr&gt;</noscript>


<p>
<input type="radio" name="texturechoice" id="notexture" onchange="doTextureChoice()">
       <label for="notexture" style="margin-right:20px">No Texture</label>
<input type="radio" name="texturechoice" id="objectcoords" onchange="doTextureChoice()">
       <label for="objectcoords" style="margin-right:20px">Texture with Object Coords</label>
<input type="radio" name="texturechoice" id="worldcoords" onchange="doTextureChoice()">
       <label for="worldcoords" style="margin-right:20px">Texture with World Coords</label>
</p>
<input type="checkbox" id="animatecheckbox" onchange="doAnimate()">
       <label for="animatecheckbox" style="margin-right:20px"><b>Animate</b></label>
<p>

<canvas width="500" height="500" id="glcanvas" style="background-color:red"></canvas>






</p></body></html>